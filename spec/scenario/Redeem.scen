-- Redeem Tests

Test "Mint then Redeem All"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    -- Check current affairs
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (AToken aZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 500e8 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) Zero
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 70e18

Test "Mint, Enter and then Redeem All"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    -- Check current affairs
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (AToken aZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff aZRX
    Redeem Geoff 500e8 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) Zero
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 70e18

Test "Mint then Redeem Part"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    -- Check current affairs
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (AToken aZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 250e8 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 250e8
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 45e18

Test "Mint then Redeem Too Much"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    -- Check and hold static
    Invariant Static (AToken aZRX ExchangeRateStored)
    Invariant Remains (Bep20 aZRX TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    AllowFailures
    Redeem Geoff 501e8 aZRX
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint then Redeem Zero"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    -- Check current affairs
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (AToken aZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 0e18 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 20e18

Test "Mint then redeem with interest - no reserves"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Invariant Remains (AToken aZRX Reserves) Zero
    Prep Geoff 50e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (AToken aZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX aZRX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 55e18
    Assert Equal (AToken aZRX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 aZRX
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 55e18
    Assert Equal (Bep20 ZRX TokenBalance aZRX) 0e18
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 0e8
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 0e18
    Assert Equal (AToken aZRX ExchangeRate) 1e9

Test "Mint then redeem part with interest - no reserves"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Invariant Remains (AToken aZRX Reserves) Zero
    Prep Geoff 50e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (AToken aZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX aZRX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 55e18
    Assert Equal (AToken aZRX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 499e8 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 1e8
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 0.11e18
    Assert Equal (AToken aZRX ExchangeRate) 1.1e9

Test "Mint then redeem with reserves and interest"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (AToken aZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX aZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 500e8
    Assert Equal (AToken aZRX Reserves) 1e18
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (AToken aZRX ExchangeRate) 1.08e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 aZRX
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 54e18
    Assert Equal (Bep20 ZRX TokenBalance aZRX) 1e18
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 0e8
    Assert Equal (AToken aZRX Reserves) 1e18
    Assert Equal (AToken aZRX UnderlyingBalance Geoff) 0e18
    Assert Equal (AToken aZRX ExchangeRate) 1e9

Test "Two users Mint, one redeems"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Prep Geoff Some ZRX aZRX
    Prep Torrey Some ZRX aZRX
    Mint Geoff 2e18 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 20e8
    Assert Equal (Bep20 aZRX TotalSupply) 20e8
    Mint Torrey 2e18 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 20e8
    Assert Equal (Bep20 aZRX TokenBalance Torrey) 20e8
    Assert Equal (Bep20 aZRX TotalSupply) 40e8
    Redeem Torrey 10e8 aZRX
    Assert Equal (Bep20 aZRX TokenBalance Geoff) 20e8
    Assert Equal (Bep20 aZRX TokenBalance Torrey) 10e8
    Assert Equal (Bep20 aZRX TotalSupply) 30e8

Test "Redeem transfer out fails"
    NewComptroller
    ListedAToken EVL cEVL initialExchangeRate:1e9 tokenType:Evil
    Bep20 EVL SetFail False
    Prep Geoff 70e18 EVL cEVL
    Mint Geoff 50e18 cEVL
    -- Check current affairs
    Invariant Remains (Bep20 cEVL TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 EVL TokenBalance Geoff) 20e18
    Invariant Static (AToken cEVL ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Bep20 EVL SetFail True
    AllowFailures
    Redeem Geoff 500e8 cEVL
    Assert Revert "revert TOKEN_TRANSFER_OUT_FAILED"

Test "Mint, Enter, then Redeem Too Much (collateral factor: 0)"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    -- Check and hold static
    Invariant Static (AToken aZRX ExchangeRateStored)
    Invariant Remains (Bep20 aZRX TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff aZRX
    AllowFailures
    Redeem Geoff 501e8 aZRX
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint, Enter, then Redeem Too Much (collateral factor: 0.1)"
    NewComptroller
    ListedAToken ZRX aZRX initialExchangeRate:1e9
    Comptroller SetCollateralFactor aZRX 0.1
    Prep Geoff 70e18 ZRX aZRX
    Mint Geoff 50e18 aZRX
    -- Check and hold static
    Invariant Static (AToken aZRX ExchangeRateStored)
    Invariant Remains (Bep20 aZRX TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff aZRX
    AllowFailures
    Redeem Geoff 501e8 aZRX
    Assert Failure COMPTROLLER_REJECTION REDEEM_COMPTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
