-- Redeem Tests

Test "Mint WBTC then Redeem All"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    -- Check current affairs
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Any other good invariants?
    Invariant Static (AToken aWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 500e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) Zero
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 70e8

Test "Mint WBTC, Enter and then Redeem All"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    -- Check current affairs
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Any other good invariants?
    Invariant Static (AToken aWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff aWBTC
    Redeem Geoff 500e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) Zero
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 70e8

Test "Mint WBTC then Redeem Part"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    -- Check current affairs
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Any other good invariants?
    Invariant Static (AToken aWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 250e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 250e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 45e8

Test "Mint WBTC then Redeem Too Much"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    -- Check and hold static
    Invariant Static (AToken aWBTC ExchangeRateStored)
    Invariant Remains (Bep20 aWBTC TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Now redeem after some time
    FastForward 2 Blocks
    AllowFailures
    Redeem Geoff 501e8 aWBTC
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint WBTC then Redeem Zero"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    -- Check current affairs
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Any other good invariants?
    Invariant Static (AToken aWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 0e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8

Test "Mint WBTC then redeem with interest - no reserves"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Invariant Remains (AToken aWBTC Reserves) Zero
    Prep Geoff 50e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 50e8
    Assert Equal (AToken aWBTC ExchangeRate) 0.1
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC aWBTC 10e8 5e8 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e8 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 55e8
    Assert Equal (AToken aWBTC ExchangeRate) 0.11
    -- Now redeem all with interest
    Redeem Geoff 500e8 aWBTC
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 55e8
    Assert Equal (Bep20 WBTC TokenBalance aWBTC) 0e8
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 0e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 0e8
    Assert Equal (AToken aWBTC ExchangeRate) 0.1

Test "Mint WBTC then redeem part with interest - no reserves"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Invariant Remains (AToken aWBTC Reserves) Zero
    Prep Geoff 50e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 50e8
    Assert Equal (AToken aWBTC ExchangeRate) 0.1
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC aWBTC 10e8 5e8 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e8 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 55e8
    Assert Equal (AToken aWBTC ExchangeRate) 0.11
    -- Now redeem all with interest
    Redeem Geoff 499e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 1e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 0.11e8
    Assert Equal (AToken aWBTC ExchangeRate) 0.11

Test "Mint WBTC then redeem with reserves and interest"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 50e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 50e8
    Assert Equal (AToken aWBTC ExchangeRate) 0.1
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC aWBTC 10e8 5e8 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e8 of interest for the protocol
    --   The reserves should get 20% of this, or 1e8, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 500e8
    Assert Equal (AToken aWBTC Reserves) 1e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 54e8
    -- 55e8 + 0e8 - 1e8 / 500
    Assert Equal (AToken aWBTC ExchangeRate) 0.108
    -- Now redeem all with interest
    Redeem Geoff 500e8 aWBTC
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 54e8
    Assert Equal (Bep20 WBTC TokenBalance aWBTC) 1e8
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 0e8
    Assert Equal (AToken aWBTC Reserves) 1e8
    Assert Equal (AToken aWBTC UnderlyingBalance Geoff) 0e8
    Assert Equal (AToken aWBTC ExchangeRate) 0.1

Test "Two users Mint WBTC, one redeems"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff Some WBTC aWBTC
    Prep Torrey Some WBTC aWBTC
    Mint Geoff 2e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 20e8
    Assert Equal (Bep20 aWBTC TotalSupply) 20e8
    Mint Torrey 2e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 20e8
    Assert Equal (Bep20 aWBTC TokenBalance Torrey) 20e8
    Assert Equal (Bep20 aWBTC TotalSupply) 40e8
    Redeem Torrey 10e8 aWBTC
    Assert Equal (Bep20 aWBTC TokenBalance Geoff) 20e8
    Assert Equal (Bep20 aWBTC TokenBalance Torrey) 10e8
    Assert Equal (Bep20 aWBTC TotalSupply) 30e8

Test "Redeem WBTC transfer out fails"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    -- Check current affairs
    Invariant Remains (Bep20 aWBTC TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 WBTC TokenBalance Geoff) 20e8
    Invariant Static (AToken aWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Bep20 WBTC Pause
    AllowFailures
    Redeem Geoff 500e8 aWBTC
    Assert Revert

Test "Mint WBTC, Enter, then Redeem Too Much (collateral factor: 0)"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    -- Check and hold static
    Invariant Static (AToken aWBTC ExchangeRateStored)
    Invariant Remains (Bep20 aWBTC TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff aWBTC
    AllowFailures
    Redeem Geoff 501e8 aWBTC
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint WBTC, Enter, then Redeem Too Much (collateral factor: 0.1)"
    NewComptroller
    ListedAToken WBTC aWBTC initialExchangeRate:0.1 tokenType:WBTC
    Comptroller SetCollateralFactor aWBTC 0.1
    Prep Geoff 70e8 WBTC aWBTC
    Mint Geoff 50e8 aWBTC
    -- Check and hold static
    Invariant Static (AToken aWBTC ExchangeRateStored)
    Invariant Remains (Bep20 aWBTC TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff aWBTC
    AllowFailures
    Redeem Geoff 501e8 aWBTC
    Assert Failure COMPTROLLER_REJECTION REDEEM_COMPTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
