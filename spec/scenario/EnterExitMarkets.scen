-- Enter and Exit Markets Tests

Test "Enter Markets Idempotent"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	Assert Equal (Comptroller AssetsIn Geoff) []
	ListedAToken ZRX aZRX
	EnterMarkets Geoff aZRX
	Assert Log MarketEntered (aToken (Address aZRX)) (account (Address Geoff))
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff aZRX)
	ListedAToken OMG aOMG
	EnterMarkets Geoff aZRX aOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff aZRX)
	Assert True (Comptroller CheckMembership Geoff aOMG)
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX) (Address aOMG)]

Test "Entered Market Must Be Supported"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedAToken ZRX aZRX
	EnterMarkets Geoff aZRX
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	NewAToken OMG aOMG
	EnterMarkets Geoff aZRX aOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff aZRX)
	Assert False (Comptroller CheckMembership Geoff aOMG)
	Support aOMG
	EnterMarkets Geoff aZRX aOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff aZRX)
	Assert True (Comptroller CheckMembership Geoff aOMG)

Test "Exit single market"
	NewComptroller
	ListedAToken ZRX aZRX
	EnterMarkets Geoff aZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX)]
	ExitMarket Geoff aZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit non-entered market"
	NewComptroller
	ListedAToken ZRX aZRX
	ExitMarket Geoff aZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit one of two market from the front"
	NewComptroller
	ListedAToken ZRX aZRX
	ListedAToken OMG aOMG
	EnterMarkets Geoff aZRX aOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX) (Address aOMG)]
	ExitMarket Geoff aZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aOMG)]

Test "Exit one of two market from the back"
	NewComptroller
	ListedAToken ZRX aZRX
	ListedAToken OMG aOMG
	EnterMarkets Geoff aZRX aOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX) (Address aOMG)]
	ExitMarket Geoff aOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX)]

Test "Exit multiple markets"
	NewComptroller
	ListedAToken ZRX aZRX
	ListedAToken OMG aOMG
	ListedAToken BAT aBAT
	ListedAToken REP aREP
	ListedAToken DAI aDAI
	EnterMarkets Geoff aZRX aOMG aBAT aREP aDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX) (Address aOMG) (Address aBAT) (Address aREP) (Address aDAI)]
	ExitMarket Geoff aZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aDAI) (Address aOMG) (Address aBAT) (Address aREP)]
	ExitMarket Geoff aREP
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aDAI) (Address aOMG) (Address aBAT)]
	ExitMarket Geoff aOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aDAI) (Address aBAT)]
	ExitMarket Geoff aDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aBAT)]
	ExitMarket Geoff aBAT
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Realistic Market Scenario"
	PricedComptroller
	ListedAToken ZRX aZRX
	SetPriceCF aZRX 0.002 0.4
	ListedEtherToken aMATIC
	Comptroller SetCollateralFactor aMATIC 0.8
	ListedAToken BAT aBAT
	SetPriceCF aBAT 0.0015 0.3
	-- Mint some aZRX and aMATIC
	Prep Geoff 1250e18 ZRX aZRX
	Mint Geoff 1250e18 aZRX -- Liquidity -> 0.4 * 0.002 * 1250e18 = 1.0e18
	SendMintEth Geoff 2.5e18 aMATIC -- Liqiuidity -> 0.8 * 1.0 * 2.5e18 = 2.0e18
	-- Check liquidity is zero when not in any markets
	Assert Equal (Comptroller Liquidity Geoff) Zero
	-- Enter ZRX and check liquidity
	EnterMarkets Geoff aZRX
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18
	-- Fail to borrow BAT due to liquidity
	Give aBAT 1000e18 BAT
	HoldInvariants
	Borrow Geoff 1000e18 aBAT -- 1000e18 * 0.0015 = 1.5e18 required liquidity
							  -- But since we're only in ZRX, we only have 1.0e18 liquidity
	Assert Failure COMPTROLLER_REJECTION BORROW_COMPTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
	-- Enter aMATIC and check liquidity
	EnterMarkets Geoff aMATIC
	Assert Equal (Comptroller Liquidity Geoff) 3.0e18 -- Sum of aMATIC and aZRX liquidity from above
	-- Borrow previous BAT amount given liquidity
	Borrow Geoff 1000e18 aBAT
	Assert Equal (Comptroller Liquidity Geoff) 1.5e18 -- Less the borrow amount's toll
	-- Try to exit a eth market but fail due to given borrow requiring eth as collateral
	HoldInvariants
	ExitMarket Geoff aMATIC
	Assert Failure REJECTION EXIT_MARKET_REJECTION INSUFFICIENT_LIQUIDITY -- Liquidity check fails
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX) (Address aBAT) (Address aMATIC)]
	-- Repay some borrow and exit market OMG
	Allow Geoff aBAT
	RepayBorrow Geoff 500e18 aBAT
	Assert Equal (Comptroller Liquidity Geoff) 2.25e18 -- With 0.75e18 repaid
	ExitMarket Geoff aMATIC
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX) (Address aBAT)]
	Assert Equal (Comptroller Liquidity Geoff) 0.25e18 -- Less Eth's 2.0e18 collateral weight
	-- Try and exit aBAT (firist without, then after, repaying)
	HoldInvariants
	ExitMarket Geoff aBAT
	Assert Failure NONZERO_BORROW_BALANCE EXIT_MARKET_BALANCE_OWED
	RepayBorrow Geoff UInt256Max aBAT
	ExitMarket Geoff aBAT
	Assert Equal (Comptroller AssetsIn Geoff) [(Address aZRX)]
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18 -- Back to just aZRX
	-- Exit aZRX
	ExitMarket Geoff aZRX
	Assert Equal (Comptroller AssetsIn Geoff) []
	Assert Equal (Comptroller Liquidity Geoff) 0e18 -- Back to nothing
